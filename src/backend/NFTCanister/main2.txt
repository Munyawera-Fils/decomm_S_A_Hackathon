import Main "canister:backend";
import Array "mo:base/Array";
import Buffer "mo:base/Buffer";
import Vec "mo:vector";
import Principal "mo:base/Principal";
import Time "mo:base/Time";
import Nat "mo:base/Nat";
import D "mo:base/Debug";
import Debug "mo:base/Debug";
import Result "mo:base/Result";
import CertifiedData "mo:base/CertifiedData";

import Blob "mo:base/Blob";

import User "../main/User";
import CertTree "mo:cert/CertTree";

import ICRC7 "mo:icrc7-mo";
import ICRC37 "mo:icrc37-mo";
import ICRC3 "mo:icrc3-mo";

import ICRC7Default "icrc7";
import ICRC37Default "icrc37";
import ICRC3Default "icrc3";

shared(_init_msg) actor class Example(_args : {
  icrc7_args: ?ICRC7.InitArgs;
  icrc37_args: ?ICRC37.InitArgs;
  icrc3_args: ICRC3.InitArgs;
}) = this {

  type Account =                          ICRC7.Account;
  type Environment =                      ICRC7.Environment;
  type Value =                            ICRC7.Value;
  type NFT =                              ICRC7.NFT;
  type NFTShared =                        ICRC7.NFTShared;
  type NFTMap =                           ICRC7.NFTMap;
  type OwnerOfResponse =                  ICRC7.Service.OwnerOfResponse;
  type OwnerOfRequest =                   ICRC7.Service.OwnerOfRequest;
  type TransferArgs =                     ICRC7.Service.TransferArg;
  type TransferResult =                   ICRC7.Service.TransferResult;
  type TransferError =                    ICRC7.Service.TransferError;
  type BalanceOfRequest =                 ICRC7.Service.BalanceOfRequest;
  type BalanceOfResponse =                ICRC7.Service.BalanceOfResponse;
  type TokenApproval =                    ICRC37.Service.TokenApproval;
  type CollectionApproval =               ICRC37.Service.CollectionApproval;
  type ApprovalInfo =                     ICRC37.Service.ApprovalInfo;
  type ApproveTokenResult =               ICRC37.Service.ApproveTokenResult;
  type ApproveTokenArg =                  ICRC37.Service.ApproveTokenArg; 
  type ApproveCollectionArg =             ICRC37.Service.ApproveCollectionArg; 
  type IsApprovedArg =                    ICRC37.Service.IsApprovedArg;
  type ApproveCollectionResult =          ICRC37.Service.ApproveCollectionResult;
  type RevokeTokenApprovalArg =           ICRC37.Service.RevokeTokenApprovalArg;
  type RevokeCollectionApprovalArg =      ICRC37.Service.RevokeCollectionApprovalArg;
  type TransferFromArg =                  ICRC37.Service.TransferFromArg;
  type TransferFromResult =               ICRC37.Service.TransferFromResult;
  type RevokeTokenApprovalResult =        ICRC37.Service.RevokeTokenApprovalResult;
  type RevokeCollectionApprovalResult =   ICRC37.Service.RevokeCollectionApprovalResult;

  stable var init_msg = _init_msg; //preserves original initialization;

  stable var icrc7_migration_state = ICRC7.init(
    ICRC7.initialState(), 
    #v0_1_0(#id), 
    switch(_args.icrc7_args){
      case(null) ICRC7Default.defaultConfig(init_msg.caller);
      case(?val) val;
    }, 
    init_msg.caller
  );

  let #v0_1_0(#data(icrc7_state_current)) = icrc7_migration_state;

  stable var icrc37_migration_state = ICRC37.init(
    ICRC37.initialState(), 
    #v0_1_0(#id), 
    switch(_args.icrc37_args){
      case(null) ICRC37Default.defaultConfig(init_msg.caller);
      case(?val) val;
    }, 
    init_msg.caller
  );

  let #v0_1_0(#data(icrc37_state_current)) = icrc37_migration_state;

  stable var icrc3_migration_state = ICRC3.init(
    ICRC3.initialState(),
    #v0_1_0(#id), 
    switch(_args.icrc3_args){
      case(null) ICRC3Default.defaultConfig(init_msg.caller);
      case(?val) ?val : ICRC3.InitArgs;
    }, 
    init_msg.caller
  );

  let #v0_1_0(#data(icrc3_state_current)) = icrc3_migration_state;

  private var _icrc7 : ?ICRC7.ICRC7 = null;
  private var _icrc37 : ?ICRC37.ICRC37 = null;
  private var _icrc3 : ?ICRC3.ICRC3 = null;

  private func get_icrc7_state() : ICRC7.CurrentState {
    return icrc7_state_current;
  };

  private func get_icrc37_state() : ICRC37.CurrentState {
    return icrc37_state_current;
  };

  private func get_icrc3_state() : ICRC3.CurrentState {
    return icrc3_state_current;
  };

  stable let cert_store : CertTree.Store = CertTree.newStore();
  let ct = CertTree.Ops(cert_store);

  private func get_certificate_store() : CertTree.Store {
    D.print("returning cert store " # debug_show(cert_store));
    return cert_store;
  };

  private func updated_certification(cert: Blob, lastIndex: Nat) : Bool{
    D.print("updating the certification " # debug_show(CertifiedData.getCertificate(), ct.treeHash()));
    ct.setCertifiedData();
    D.print("did the certification " # debug_show(CertifiedData.getCertificate()));
    return true;
  };

  private func get_icrc3_environment() : ICRC3.Environment {
    ?{
      updated_certification = ?updated_certification;
      get_certificate_store = ?get_certificate_store;
    };
  };

  D.print("Initargs: " # debug_show(_args));

  func ensure_block_types(icrc3Class: ICRC3.ICRC3) : () {
    D.print("in ensure_block_types: ");
    let supportedBlocks = Buffer.fromIter<ICRC3.BlockType>(icrc3Class.supported_block_types().vals());

    let blockequal = func(a : {block_type: Text}, b : {block_type: Text}) : Bool {
      a.block_type == b.block_type;
    };

    for(thisItem in icrc7().supported_blocktypes().vals()){
      if(Buffer.indexOf<ICRC3.BlockType>({block_type = thisItem.0; url=thisItem.1;}, supportedBlocks, blockequal) == null){
        supportedBlocks.add({block_type = thisItem.0; url = thisItem.1});
      };
    };

    for(thisItem in icrc37().supported_blocktypes().vals()){
      if(Buffer.indexOf<ICRC3.BlockType>({block_type = thisItem.0; url=thisItem.1;}, supportedBlocks, blockequal) == null){
        supportedBlocks.add({block_type = thisItem.0; url = thisItem.1});
      };
    };

    icrc3Class.update_supported_blocks(Buffer.toArray(supportedBlocks));
  };

  func icrc3() : ICRC3.ICRC3 {
    switch(_icrc3){
      case(null){
        let initclass : ICRC3.ICRC3 = ICRC3.ICRC3(?icrc3_migration_state, Principal.fromActor(this), get_icrc3_environment());
        D.print("ensure should be done: " # debug_show(initclass.supported_block_types()));
        _icrc3 := ?initclass;
        ensure_block_types(initclass);
        initclass;
      };
      case(?val) val;
    };
  };

  private func get_icrc7_environment() : ICRC7.Environment {
    {
      canister = get_canister;
      get_time = get_time;
      refresh_state = get_icrc7_state;
      add_ledger_transaction = ?icrc3().add_record;
      can_mint = null;
      can_burn = null;
      can_transfer = null;
      can_update = null;
    };
  };

  private func get_icrc37_environment() : ICRC37.Environment {
    {
      canister = get_canister;
      get_time = get_time;
      refresh_state = get_icrc37_state;
      icrc7 = icrc7();
      can_transfer_from = null;
      can_approve_token = null;
      can_approve_collection = null;
      can_revoke_token_approval = null;
      can_revoke_collection_approval = null;
    };
  };

  func icrc7() : ICRC7.ICRC7 {
    switch(_icrc7){
      case(null){
        let initclass : ICRC7.ICRC7 = ICRC7.ICRC7(?icrc7_migration_state, Principal.fromActor(this), get_icrc7_environment());
        _icrc7 := ?initclass;
        initclass;
      };
      case(?val) val;
    };
  };

  func icrc37() : ICRC37.ICRC37 {
    switch(_icrc37){
      case(null){
        let initclass : ICRC37.ICRC37 = ICRC37.ICRC37(?icrc37_migration_state, Principal.fromActor(this), get_icrc37_environment());
        _icrc37 := ?initclass;
        initclass;
      };
      case(?val) val;
    };
  };

  private var canister_principal : ?Principal = null;

  private func get_canister() : Principal {
    switch(canister_principal){
      case(null){
        let actor_id = Principal.fromActor(this);
        canister_principal := ?actor_id;
        actor_id;
      };
      case(?val) val;
    };
  };

  private func get_time() : Time.Time {
    Time.now();
  };

    public func returnPrincipal(user : User.User) : async Principal {
        return Principal.fromActor(user);
    };

var counter: Nat = 0; // Initialize counter globally
  public shared (_msg) func getNFTsByUser(buyerPrincipal: Principal) : async [Nat] {
    // Fetch tokens associated with the principal (buyer)
    let nftsResult = await icrc7().tokens_of(buyerPrincipal, null, null);
    
    // Check if the result is an array; if not, handle accordingly
    switch (nftsResult) {
        case (#ok(nfts)) {
            return nfts; // Return the array of NFT IDs
        };
        case (#err(error)) {
            // Handle the error case if necessary
            return []; // Returning an empty array in case of an error
        };
        case (#GenericError(err)) {
            return []; // Handle generic error, return empty array
        };
    }
  };

// Function for paying with an NFT
public shared (_msg) func payWithNFT(buyerName: Text, productID: Nat) : async Result.Result<(), Text> {
    // Get user object using the new method
    let userObjOpt = await Main.getUserByName(buyerName);

    switch (userObjOpt) {
        case (null) {
            return #err("User not found");
        };
        case (?userObj) {
            let productResult = await Main.getProductById(productID);

            switch (productResult) {
                case (#err(errorMsg)) {
                    return #err(errorMsg);
                };
                case (#ok(product)) {
                    let sellerName = await product.getSellerID();
                    let seller = await Main.getUserByName(sellerName);
                    switch (seller) {
                        case (null) {
                            return #err("Seller not found");
                        };
                        case (?seller) {
                            // Fetch seller principal
                            let sellerPrincipal = await returnPrincipal(seller);

                            // Fetch the buyer's principal
                            let buyerPrincipal = await returnPrincipal(userObj);

                            // Check buyer's NFT balance to get available NFT IDs
                            let nfts = await getNFTsByUser(buyerPrincipal);
                            if (Array.size(nfts) == 0) {
                                return #err("No NFTs available for payment");
                            };

                            // Assume we're taking the first NFT from the list for simplicity
                            let nftID = nfts[0]; // Replace this logic as needed to select an appropriate NFT
                            let transferArg: ICRC7.TransferArg = {
                            from = { owner = buyerPrincipal; subaccount = null }; // Transfer from buyer
                            to = { owner = sellerPrincipal; subaccount = null };  // Transfer to seller
                            token_id = nftID;
                            amount = 1; // You can adjust this based on the logic for the NFT
                            created_at_time = null; // Add created_at_time field
                            from_subaccount = null; // Add from_subaccount field
                            memo = ?Blob.fromArray([0, 1]); // Add memo field
                            };

                            let icrc7Result = icrc7().transfer([transferArg]);

                            Debug.print("ICRC7 Transfer Result: " # debug_show(icrc7Result));
                            // switch (icrc7Result) {
                            //     case (?#Ok(())) {
                            //         // Successful transfer, now record the transaction
                            //         let transaction = await Main.createTransaction(productID, buyerName, {
                            //             currency = #kt;      // Using Knowledge Token (NFT)
                            //             amount = 1;          // 1 NFT
                            //         });

                            //         let transactionType = await Main.convertTransactionToType(transaction);

                            //         // Update seller's sold items and buyer's purchases
                            //         for (index in usersArray.vals()) {
                            //             let target = await index.getName();
                            //             if (Text.equal(target, sellerName)) {
                            //                 await index.addToSoldItems(transactionType);
                            //                 await userObj.addToPurchases(transactionType);
                            //                 return #ok(()); // Successful purchase
                            //             };
                            //         };

                            //         return #err("Seller not found");
                            //     };
                            //     case (#Err(errorMsg)) {
                            //         return #err("NFT transfer failed: " # errorMsg);
                            //     };
                            // };
                            return #ok(());
                        };
                    };
                };
            };
        };
    };
};

};
